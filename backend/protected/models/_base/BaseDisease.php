<?php

/**
 * This is the model base class for the table "disease".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Disease".
 *
 * Columns in table "disease" available as properties of the model,
 * followed by relations of table "disease" available as properties of the model.
 *
 * @property integer $iddisease
 * @property string $date
 * @property string $name
 * @property string $note
 * @property integer $iduser
 *
 * @property User $user
 * @property Medicine[] $medicines
 */
abstract class BaseDisease extends GxActiveRecord {
	
    
    public $name_delete;
	    
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'disease';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Disease|Diseases', $n);
	}

	public static function representingColumn() {
		return array('date');
	}

	public function rules() {
		return array(
			array('iduser', 'required'),
			array('iduser', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>120),
			array('date, note', 'safe'),
			array('name', 'file', 'types'=>'jpg,png', 'allowEmpty'=>true),
			array('name_delete', 'length', 'max'=>1),
			array('date, name, note', 'default', 'setOnEmpty' => true, 'value' => null),
			array('iddisease, date, name, note, iduser', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'iduser'),
			'medicines' => array(self::MANY_MANY, 'Medicine', 'disease_medicine(iddisease, idmedicine)'),
		);
	}

	public function pivotModels() {
		return array(
			'medicines' => 'DiseaseMedicine',
		);
	}

	public function attributeLabels() {
		return array(
			'iddisease' => Yii::t('app', 'Iddisease'),
			'date' => Yii::t('app', 'Date'),
			'name' => Yii::t('app', 'Name'),
			'note' => Yii::t('app', 'Note'),
			'iduser' => null,
			'user' => null,
			'medicines' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('iddisease', $this->iddisease);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('note', $this->note, true);
		$criteria->compare('iduser', $this->iduser);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}